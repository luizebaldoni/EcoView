<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views.py" />
              <option name="originalContent" value="import json&#10;import traceback&#10;from datetime import timedelta&#10;from venv import logger&#10;&#10;from django.contrib.auth.decorators import login_required&#10;from django.contrib.auth import authenticate, login, logout&#10;from django.contrib.auth.mixins import LoginRequiredMixin&#10;from django.shortcuts import redirect&#10;from django import forms&#10;from django.core.paginator import Paginator&#10;from django.db.models import Avg, Max, Min&#10;from django.http import JsonResponse&#10;from django.shortcuts import render&#10;from django.utils import timezone&#10;from django.views.decorators.http import require_GET&#10;from rest_framework.renderers import *&#10;from rest_framework.request import *&#10;from rest_framework.views import *&#10;&#10;from config import settings&#10;from .models import SensorReading&#10;from django.contrib.auth.models import User, Group&#10;from django.core.validators import validate_email&#10;from django.core.exceptions import ValidationError&#10;&#10;&#10;class HomeView(LoginRequiredMixin, APIView):&#10;    renderer_classes = [TemplateHTMLRenderer]&#10;    template_name = 'home.html'&#10;    login_url = 'login'&#10;&#10;    def get(self, request):&#10;        context = {&#10;            'title': 'Sensor Monitoring System',&#10;            'description': 'Welcome to the sensor data monitoring platform',&#10;            'features': [&#10;                'Real-time sensor data visualization',&#10;                'Historical data analysis',&#10;                'Device management',&#10;                'API endpoints for integration'&#10;            ],&#10;            'api_endpoints': [&#10;                {'name': 'Sensor Data API', 'url': '/api/receive/', 'method': 'POST'},&#10;                {'name': 'Dashboard', 'url': '/dashboard/', 'method': 'GET'},&#10;                {'name': 'Data Table', 'url': '/table/', 'method': 'GET'}&#10;            ]&#10;        }&#10;        return Response(context, status=status.HTTP_200_OK)&#10;@csrf_exempt&#10;def receive_sensor_data(request):&#10;    &quot;&quot;&quot;&#10;    API endpoint to receive sensor data from ESP32 devices&#10;    Expected JSON format:&#10;    {&#10;        &quot;sensor1&quot;: value, &quot;sensor2&quot;: value, ..., &quot;sensor13&quot;: value,&#10;        &quot;device_id&quot;: string,&#10;        &quot;battery&quot;: float (0-100)&#10;    }&#10;    &quot;&quot;&quot;&#10;    if request.method != 'POST':&#10;        return JsonResponse(&#10;                {'status': 'error', 'message': 'Only POST method is allowed'},&#10;                status = 405&#10;                )&#10;    &#10;    try:&#10;        # Parse and validate JSON data&#10;        try:&#10;            data = json.loads(request.body.decode('utf-8'))&#10;        except json.JSONDecodeError:&#10;            return JsonResponse(&#10;                    {'status': 'error', 'message': 'Invalid JSON format'},&#10;                    status = 400&#10;                    )&#10;        &#10;        # Validate required fields&#10;        required_fields = [f'sensor{i}' for i in range(1, 14)] + ['device_id']&#10;        missing_fields = [field for field in required_fields if field not in data]&#10;        &#10;        if missing_fields:&#10;            return JsonResponse(&#10;                    {'status': 'error', 'message': f'Missing required fields: {&quot;, &quot;.join(missing_fields)}'},&#10;                    status = 400&#10;                    )&#10;        &#10;        # Validate sensor values&#10;        try:&#10;            sensor_data = {&#10;                    f'sensor{i}': float(data[f'sensor{i}'])&#10;                    for i in range(1, 14)&#10;                    }&#10;        except (ValueError, TypeError):&#10;            return JsonResponse(&#10;                    {'status': 'error', 'message': 'All sensor values must be numbers'},&#10;                    status = 400&#10;                    )&#10;        &#10;        # Validate battery level&#10;        battery_level = float(data.get('battery', 0))&#10;        if not 0 &lt;= battery_level &lt;= 100:&#10;            return JsonResponse(&#10;                    {'status': 'error', 'message': 'Battery level must be between 0 and 100'},&#10;                    status = 400&#10;                    )&#10;        &#10;        # Create and save new reading&#10;        reading = SensorReading(&#10;                timestamp = timezone.now(),&#10;                device_id = data['device_id'],&#10;                battery_level = battery_level,&#10;                **sensor_data&#10;                )&#10;        reading.save()&#10;        &#10;        return JsonResponse({&#10;                'status': 'success',&#10;                'message': 'Data saved successfully',&#10;                'reading_id': reading.id,&#10;                'timestamp': reading.timestamp.isoformat()&#10;                })&#10;    &#10;    except Exception as e:&#10;        # Log the error for debugging&#10;        import logging&#10;        logger = logging.getLogger(__name__)&#10;        logger.error(f&quot;Error processing sensor data: {str(e)}&quot;, exc_info = True)&#10;        &#10;        return JsonResponse(&#10;                {'status': 'error', 'message': 'Internal server error'},&#10;                status = 500&#10;                )&#10;&#10;def custom_error_view(request, exception = None):&#10;&#9;&quot;&quot;&quot;&#10;&#9;Custom error view that shows detailed technical information for debugging,&#10;&#9;while maintaining a user-friendly interface.&#10;&#9;&quot;&quot;&quot;&#10;&#9;# Get exception information&#10;&#9;exc_type, exc_value, exc_traceback = sys.exc_info()&#10;&#9;error_traceback = traceback.format_exception(exc_type, exc_value, exc_traceback)&#10;&#9;&#10;&#9;# Build context with detailed error information&#10;&#9;context = {&#10;&#9;&#9;&#9;'error_type': exc_type.__name__ if exc_type else 'Unknown Error',&#10;&#9;&#9;&#9;'error_message': str(exc_value) if exc_value else 'No error message available',&#10;&#9;&#9;&#9;'error_traceback': error_traceback,&#10;&#9;&#9;&#9;'timestamp': timezone.now(),&#10;&#9;&#9;&#9;'request_path': request.path,&#10;&#9;&#9;&#9;'request_method': request.method,&#10;&#9;&#9;&#9;'debug_mode': settings.DEBUG,&#10;&#9;&#9;&#9;}&#10;&#9;&#10;&#9;# Add additional debug information if in DEBUG mode&#10;&#9;if settings.DEBUG:&#10;&#9;&#9;from django.http import QueryDict&#10;&#9;&#9;context.update({&#10;&#9;&#9;&#9;&#9;'request_headers': dict(request.headers),&#10;&#9;&#9;&#9;&#9;'request_params': QueryDict(request.META.get('QUERY_STRING', '')),&#10;&#9;&#9;&#9;&#9;'request_post': request.POST if request.method == 'POST' else None,&#10;&#9;&#9;&#9;&#9;})&#10;&#9;&#10;&#9;# Determine the status code&#10;&#9;status_code = 500&#10;&#9;if hasattr(exception, 'status_code'):&#10;&#9;&#9;status_code = exception.status_code&#10;&#9;context['status_code'] = status_code&#10;&#9;&#10;&#9;# Log the error&#10;&#9;logger.error(&#10;&#9;&#9;&#9;f&quot;Error {status_code} at {request.path}\n&quot;&#10;&#9;&#9;&#9;f&quot;Type: {context['error_type']}\n&quot;&#10;&#9;&#9;&#9;f&quot;Message: {context['error_message']}\n&quot;&#10;&#9;&#9;&#9;f&quot;Traceback:\n{''.join(error_traceback)}&quot;&#10;&#9;&#9;&#9;)&#10;&#9;&#10;&#9;return render(request, 'error.html', context, status = status_code)&#10;&#10;@require_GET&#10;def latest_sensor_data(request):&#10;    latest = SensorReading.objects.order_by('-timestamp').first()&#10;    if not latest:&#10;        return JsonResponse({'error': 'No data available'}, status=404)&#10;    return JsonResponse({&#10;        'sensor1': latest.sensor1,&#10;        'sensor2': latest.sensor2,&#10;        'timestamp': latest.timestamp.strftime('%H:%M'),&#10;        'battery': latest.battery_level,&#10;    })&#10;&#10;def dashboard(request):&#10;    &quot;&quot;&quot;&#10;    Dashboard view showing charts and summary of last 24 hours&#10;    &quot;&quot;&quot;&#10;    try:&#10;        # Get data from last 24 hours&#10;        time_threshold = timezone.now() - timedelta(hours=24)&#10;        readings = SensorReading.objects.filter(&#10;            timestamp__gte=time_threshold&#10;        ).order_by('timestamp')&#10;        &#10;        # Get summary statistics&#10;        summary = {&#10;                'temperature': {&#10;                        'current': readings.last().sensor1 if readings.exists() else None,&#10;                        'avg': readings.aggregate(Avg('sensor1'))['sensor1__avg'],&#10;                        'max': readings.aggregate(Max('sensor1'))['sensor1__max'],&#10;                        'min': readings.aggregate(Min('sensor1'))['sensor1__min']&#10;                        },&#10;                'humidity': {&#10;                        'current': readings.last().sensor7 if readings.exists() else None,&#10;                        'avg': readings.aggregate(Avg('sensor7'))['sensor7__avg'],&#10;                        'max': readings.aggregate(Max('sensor7'))['sensor7__max'],&#10;                        'min': readings.aggregate(Min('sensor7'))['sensor7__min']&#10;                        },&#10;                'battery': {&#10;                        'current': readings.last().battery_level if readings.exists() else None,&#10;                        'avg': readings.aggregate(Avg('battery_level'))['battery_level__avg'],&#10;                        'min': readings.aggregate(Min('battery_level'))['battery_level__min']&#10;                        }&#10;                }&#10;        &#10;        context = {&#10;                'readings': readings,&#10;                'summary': summary,&#10;                'sensor_names': {&#10;                        1: &quot;Temperatura Externa 1&quot;,&#10;                        2: &quot;Temperatura Externa 2&quot;,&#10;                        3: &quot;Temperatura Solo 1&quot;,&#10;                        4: &quot;Temperatura Solo 2&quot;,&#10;                        5: &quot;Temperatura Ar 1&quot;,&#10;                        6: &quot;Temperatura Ar 2&quot;,&#10;                        7: &quot;Umidade Ar 1&quot;,&#10;                        8: &quot;Umidade Ar 2&quot;,&#10;                        9: &quot;Umidade Solo&quot;,&#10;                        10: &quot;Radiação UV 1&quot;,&#10;                        11: &quot;Radiação UV 2&quot;,&#10;                        12: &quot;Velocidade Vento 1&quot;,&#10;                        13: &quot;Velocidade Vento 2&quot;&#10;                        },&#10;                'units': {&#10;                        1: &quot;°C&quot;, 2: &quot;°C&quot;, 3: &quot;°C&quot;, 4: &quot;°C&quot;, 5: &quot;°C&quot;, 6: &quot;°C&quot;,&#10;                        7: &quot;%&quot;, 8: &quot;%&quot;, 9: &quot;%&quot;,&#10;                        10: &quot;UV&quot;, 11: &quot;UV&quot;,&#10;                        12: &quot;m/s&quot;, 13: &quot;m/s&quot;&#10;                        }&#10;                }&#10;        return render(request, 'dashboard.html', context)&#10;    &#10;    except Exception as e:&#10;        import logging&#10;        logger = logging.getLogger(__name__)&#10;        logger.error(f&quot;Error in dashboard view: {str(e)}&quot;, exc_info = True)&#10;        return render(request, 'error.html', {'error': str(e)})&#10;&#10;&#10;def data_table(request):&#10;&#9;&quot;&quot;&quot;&#10;&#9;View showing paginated table with all sensor readings&#10;&#9;&quot;&quot;&quot;&#10;&#9;try:&#10;&#9;&#9;all_readings = SensorReading.objects.all().order_by('-timestamp')&#10;&#9;&#9;&#10;&#9;&#9;# Pagination - 50 items per page&#10;&#9;&#9;paginator = Paginator(all_readings, 50)&#10;&#9;&#9;page_number = request.GET.get('page')&#10;&#9;&#9;page_obj = paginator.get_page(page_number)&#10;&#9;&#9;&#10;&#9;&#9;context = {&#10;&#9;&#9;&#9;&#9;'page_obj': page_obj,&#10;&#9;&#9;&#9;&#9;'sensor_names': {&#10;&#9;&#9;&#9;&#9;&#9;&#9;1: &quot;Temp 1&quot;, 2: &quot;Temp 2&quot;, 3: &quot;Temp 3&quot;, 4: &quot;Temp 4&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;5: &quot;Temp 5&quot;, 6: &quot;Temp 6&quot;, 7: &quot;Hum 1&quot;, 8: &quot;Hum 2&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;9: &quot;Hum 3&quot;, 10: &quot;UV 1&quot;, 11: &quot;UV 2&quot;, 12: &quot;Vento 1&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;13: &quot;Vento 2&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;'units': {&#10;&#9;&#9;&#9;&#9;&#9;&#9;1: &quot;°C&quot;, 2: &quot;°C&quot;, 3: &quot;°C&quot;, 4: &quot;°C&quot;, 5: &quot;°C&quot;, 6: &quot;°C&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;7: &quot;%&quot;, 8: &quot;%&quot;, 9: &quot;%&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;10: &quot;UV&quot;, 11: &quot;UV&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;12: &quot;m/s&quot;, 13: &quot;m/s&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;return render(request, 'data_table.html', context)&#10;&#9;&#10;&#9;except Exception as e:&#10;&#9;&#9;import logging&#10;&#9;&#9;logger = logging.getLogger(__name__)&#10;&#9;&#9;logger.error(f&quot;Error in data_table view: {str(e)}&quot;, exc_info = True)&#10;&#9;&#9;return render(request, 'error.html', {'error': str(e)})&#10;&#10;&#10;class RegisterForm(forms.Form):&#10;    first_name = forms.CharField(label='Nome', max_length=30)&#10;    last_name = forms.CharField(label='Sobrenome', max_length=30)&#10;    username = forms.CharField(label='Usuário', max_length=30)&#10;    email = forms.EmailField(label='E-mail')&#10;    password = forms.CharField(label='Senha', widget=forms.PasswordInput)&#10;    group = forms.ChoiceField(label='Grupo', choices=[&#10;        ('adm', 'Administrador'),&#10;        ('ic', 'Iniciação Científica'),&#10;        ('mestrado', 'Mestrado'),&#10;        ('doutorado', 'Doutorado'),&#10;        ('professor', 'Professor'),&#10;    ])&#10;&#10;def register_view(request):&#10;    form = RegisterForm(request.POST or None)&#10;    message = None&#10;    if request.method == 'POST' and form.is_valid():&#10;        username = form.cleaned_data['username']&#10;        password = form.cleaned_data['password']&#10;        first_name = form.cleaned_data['first_name']&#10;        last_name = form.cleaned_data['last_name']&#10;        email = form.cleaned_data['email']&#10;        group_name = form.cleaned_data['group']&#10;        # Validação extra do email&#10;        try:&#10;            validate_email(email)&#10;        except ValidationError:&#10;            form.add_error('email', 'E-mail inválido.')&#10;        else:&#10;            if User.objects.filter(username=username).exists():&#10;                form.add_error('username', 'Usuário já existe.')&#10;            elif User.objects.filter(email=email).exists():&#10;                form.add_error('email', 'E-mail já cadastrado.')&#10;            else:&#10;                user = User.objects.create_user(&#10;                    username=username,&#10;                    password=password,&#10;                    first_name=first_name,&#10;                    last_name=last_name,&#10;                    email=email,&#10;                    is_active=False&#10;                )&#10;                # Adiciona ao grupo&#10;                group, created = Group.objects.get_or_create(name=group_name)&#10;                user.groups.add(group)&#10;                message = 'Cadastro realizado! Aguarde o administrador liberar seu acesso.'&#10;    return render(request, 'register.html', {'form': form, 'message': message})&#10;&#10;class LoginForm(forms.Form):&#10;    username = forms.CharField()&#10;    password = forms.CharField(widget=forms.PasswordInput)&#10;&#10;def login_view(request):&#10;    form = LoginForm(request.POST or None)&#10;    error_message = None&#10;    grupos_validos = ['adm', 'ic', 'mestrado', 'doutorado', 'professor']&#10;    if request.method == 'POST' and form.is_valid():&#10;        user = authenticate(request, username=form.cleaned_data['username'], password=form.cleaned_data['password'])&#10;        if user is not None:&#10;            if user.is_active:&#10;                # Verifica se o usuário pertence a algum grupo válido&#10;                if user.groups.filter(name__in=grupos_validos).exists():&#10;                    login(request, user)&#10;                    return redirect('home')&#10;                else:&#10;                    error_message = 'Seu usuário não pertence a nenhum grupo autorizado.'&#10;            else:&#10;                error_message = 'Seu cadastro ainda não foi autorizado pelo administrador.'&#10;        else:&#10;            error_message = 'Usuário ou senha inválidos.'&#10;    return render(request, 'login.html', {'form': form, 'error_message': error_message})&#10;&#10;@login_required(login_url='login')&#10;def dashboard(request):&#10;    &quot;&quot;&quot;&#10;    Dashboard view showing charts and summary of last 24 hours&#10;    &quot;&quot;&quot;&#10;    try:&#10;        # Get data from last 24 hours&#10;        time_threshold = timezone.now() - timedelta(hours=24)&#10;        readings = SensorReading.objects.filter(&#10;            timestamp__gte=time_threshold&#10;        ).order_by('timestamp')&#10;        &#10;        # Get summary statistics&#10;        summary = {&#10;                'temperature': {&#10;                        'current': readings.last().sensor1 if readings.exists() else None,&#10;                        'avg': readings.aggregate(Avg('sensor1'))['sensor1__avg'],&#10;                        'max': readings.aggregate(Max('sensor1'))['sensor1__max'],&#10;                        'min': readings.aggregate(Min('sensor1'))['sensor1__min']&#10;                        },&#10;                'humidity': {&#10;                        'current': readings.last().sensor7 if readings.exists() else None,&#10;                        'avg': readings.aggregate(Avg('sensor7'))['sensor7__avg'],&#10;                        'max': readings.aggregate(Max('sensor7'))['sensor7__max'],&#10;                        'min': readings.aggregate(Min('sensor7'))['sensor7__min']&#10;                        },&#10;                'battery': {&#10;                        'current': readings.last().battery_level if readings.exists() else None,&#10;                        'avg': readings.aggregate(Avg('battery_level'))['battery_level__avg'],&#10;                        'min': readings.aggregate(Min('battery_level'))['battery_level__min']&#10;                        }&#10;                }&#10;        &#10;        context = {&#10;                'readings': readings,&#10;                'summary': summary,&#10;                'sensor_names': {&#10;                        1: &quot;Temperatura Externa 1&quot;,&#10;                        2: &quot;Temperatura Externa 2&quot;,&#10;                        3: &quot;Temperatura Solo 1&quot;,&#10;                        4: &quot;Temperatura Solo 2&quot;,&#10;                        5: &quot;Temperatura Ar 1&quot;,&#10;                        6: &quot;Temperatura Ar 2&quot;,&#10;                        7: &quot;Umidade Ar 1&quot;,&#10;                        8: &quot;Umidade Ar 2&quot;,&#10;                        9: &quot;Umidade Solo&quot;,&#10;                        10: &quot;Radiação UV 1&quot;,&#10;                        11: &quot;Radiação UV 2&quot;,&#10;                        12: &quot;Velocidade Vento 1&quot;,&#10;                        13: &quot;Velocidade Vento 2&quot;&#10;                        },&#10;                'units': {&#10;                        1: &quot;°C&quot;, 2: &quot;°C&quot;, 3: &quot;°C&quot;, 4: &quot;°C&quot;, 5: &quot;°C&quot;, 6: &quot;°C&quot;,&#10;                        7: &quot;%&quot;, 8: &quot;%&quot;, 9: &quot;%&quot;,&#10;                        10: &quot;UV&quot;, 11: &quot;UV&quot;,&#10;                        12: &quot;m/s&quot;, 13: &quot;m/s&quot;&#10;                        }&#10;                }&#10;        return render(request, 'dashboard.html', context)&#10;    &#10;    except Exception as e:&#10;        import logging&#10;        logger = logging.getLogger(__name__)&#10;        logger.error(f&quot;Error in dashboard view: {str(e)}&quot;, exc_info = True)&#10;        return render(request, 'error.html', {'error': str(e)})&#10;&#10;&#10;@login_required(login_url='login')&#10;def data_table(request):&#10;&#9;&quot;&quot;&quot;&#10;&#9;View showing paginated table with all sensor readings&#10;&#9;&quot;&quot;&quot;&#10;&#9;try:&#10;&#9;&#9;all_readings = SensorReading.objects.all().order_by('-timestamp')&#10;&#9;&#9;&#10;&#9;&#9;# Pagination - 50 items per page&#10;&#9;&#9;paginator = Paginator(all_readings, 50)&#10;&#9;&#9;page_number = request.GET.get('page')&#10;&#9;&#9;page_obj = paginator.get_page(page_number)&#10;&#9;&#9;&#10;&#9;&#9;context = {&#10;&#9;&#9;&#9;&#9;'page_obj': page_obj,&#10;&#9;&#9;&#9;&#9;'sensor_names': {&#10;&#9;&#9;&#9;&#9;&#9;&#9;1: &quot;Temp 1&quot;, 2: &quot;Temp 2&quot;, 3: &quot;Temp 3&quot;, 4: &quot;Temp 4&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;5: &quot;Temp 5&quot;, 6: &quot;Temp 6&quot;, 7: &quot;Hum 1&quot;, 8: &quot;Hum 2&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;9: &quot;Hum 3&quot;, 10: &quot;UV 1&quot;, 11: &quot;UV 2&quot;, 12: &quot;Vento 1&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;13: &quot;Vento 2&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;'units': {&#10;&#9;&#9;&#9;&#9;&#9;&#9;1: &quot;°C&quot;, 2: &quot;°C&quot;, 3: &quot;°C&quot;, 4: &quot;°C&quot;, 5: &quot;°C&quot;, 6: &quot;°C&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;7: &quot;%&quot;, 8: &quot;%&quot;, 9: &quot;%&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;10: &quot;UV&quot;, 11: &quot;UV&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&#9;12: &quot;m/s&quot;, 13: &quot;m/s&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;return render(request, 'data_table.html', context)&#10;&#9;&#10;&#9;except Exception as e:&#10;&#9;&#9;import logging&#10;&#9;&#9;logger = logging.getLogger(__name__)&#10;&#9;&#9;logger.error(f&quot;Error in data_table view: {str(e)}&quot;, exc_info = True)&#10;&#9;&#9;return render(request, 'error.html', {'error': str(e)})&#10;&#10;&#10;@login_required(login_url='login')&#10;def dashboard_project(request, project):&#10;    &quot;&quot;&quot;&#10;    Dashboard dinâmico por projeto&#10;    &quot;&quot;&quot;&#10;    # Exemplo: filtrar por projeto, aqui só Breeze Vegetal&#10;    if project == 'breeze':&#10;        time_threshold = timezone.now() - timedelta(hours=24)&#10;        readings = SensorReading.objects.filter(timestamp__gte=time_threshold).order_by('timestamp')&#10;        context = {&#10;            'readings': readings,&#10;            'project': 'Breeze Vegetal',&#10;        }&#10;        return render(request, 'dashboard.html', context)&#10;    # Adicione outros projetos aqui&#10;    return render(request, 'error.html', {'error': 'Projeto não encontrado'})&#10;&#10;@login_required(login_url='login')&#10;def data_table_project(request, project):&#10;    &quot;&quot;&quot;&#10;    Tabela de dados dinâmica por projeto&#10;    &quot;&quot;&quot;&#10;    if project == 'breeze':&#10;        all_readings = SensorReading.objects.all().order_by('-timestamp')&#10;        paginator = Paginator(all_readings, 50)&#10;        page_number = request.GET.get('page')&#10;        page_obj = paginator.get_page(page_number)&#10;        context = {&#10;            'page_obj': page_obj,&#10;            'project': 'Breeze Vegetal',&#10;        }&#10;        return render(request, 'data_table.html', context)&#10;    # Adicione outros projetos aqui&#10;    return render(request, 'error.html', {'error': 'Projeto não encontrado'})&#10;&#10;class LoginForm(forms.Form):&#10;    username = forms.CharField()&#10;    password = forms.CharField(widget=forms.PasswordInput)&#10;&#10;def login_view(request):&#10;    form = LoginForm(request.POST or None)&#10;    error_message = None&#10;    grupos_validos = ['adm', 'ic', 'mestrado', 'doutorado', 'professor']&#10;    if request.method == 'POST' and form.is_valid():&#10;        user = authenticate(request, username=form.cleaned_data['username'], password=form.cleaned_data['password'])&#10;        if user is not None:&#10;            if user.is_active:&#10;                # Verifica se o usuário pertence a algum grupo válido&#10;                if user.groups.filter(name__in=grupos_validos).exists():&#10;                    login(request, user)&#10;                    return redirect('home')&#10;                else:&#10;                    error_message = 'Seu usuário não pertence a nenhum grupo autorizado.'&#10;            else:&#10;                error_message = 'Seu cadastro ainda não foi autorizado pelo administrador.'&#10;        else:&#10;            error_message = 'Usuário ou senha inválidos.'&#10;    return render(request, 'login.html', {'form': form, 'error_message': error_message})&#10;" />
              <option name="updatedContent" value="import json&#13;&#10;import traceback&#13;&#10;from datetime import timedelta&#13;&#10;from venv import logger&#13;&#10;&#13;&#10;from django.contrib.auth.decorators import login_required&#13;&#10;from django.contrib.auth import authenticate, login, logout&#13;&#10;from django.contrib.auth.mixins import LoginRequiredMixin&#13;&#10;from django.shortcuts import redirect&#13;&#10;from django import forms&#13;&#10;from django.core.paginator import Paginator&#13;&#10;from django.db.models import Avg, Max, Min&#13;&#10;from django.http import JsonResponse&#13;&#10;from django.shortcuts import render&#13;&#10;from django.utils import timezone&#13;&#10;from django.views.decorators.http import require_GET&#13;&#10;from rest_framework.renderers import *&#13;&#10;from rest_framework.request import *&#13;&#10;from rest_framework.views import *&#13;&#10;&#13;&#10;from config import settings&#13;&#10;from .models import SensorReading&#13;&#10;from django.contrib.auth.models import User, Group&#13;&#10;from django.core.validators import validate_email&#13;&#10;from django.core.exceptions import ValidationError&#13;&#10;&#13;&#10;&#13;&#10;class HomeView(LoginRequiredMixin, APIView):&#13;&#10;    renderer_classes = [TemplateHTMLRenderer]&#13;&#10;    template_name = 'home.html'&#13;&#10;    login_url = 'login'&#13;&#10;&#13;&#10;    def get(self, request):&#13;&#10;        context = {&#13;&#10;            'title': 'Sensor Monitoring System',&#13;&#10;            'description': 'Welcome to the sensor data monitoring platform',&#13;&#10;            'features': [&#13;&#10;                'Real-time sensor data visualization',&#13;&#10;                'Historical data analysis',&#13;&#10;                'Device management',&#13;&#10;                'API endpoints for integration'&#13;&#10;            ],&#13;&#10;            'api_endpoints': [&#13;&#10;                {'name': 'Sensor Data API', 'url': '/api/receive/', 'method': 'POST'},&#13;&#10;                {'name': 'Dashboard', 'url': '/dashboard/', 'method': 'GET'},&#13;&#10;                {'name': 'Data Table', 'url': '/table/', 'method': 'GET'}&#13;&#10;            ]&#13;&#10;        }&#13;&#10;        return Response(context, status=status.HTTP_200_OK)&#13;&#10;@csrf_exempt&#13;&#10;def receive_sensor_data(request):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    API endpoint to receive sensor data from ESP32 devices&#13;&#10;    Expected JSON format:&#13;&#10;    {&#13;&#10;        &quot;sensor1&quot;: value, &quot;sensor2&quot;: value, ..., &quot;sensor13&quot;: value,&#13;&#10;        &quot;device_id&quot;: string,&#13;&#10;        &quot;battery&quot;: float (0-100)&#13;&#10;    }&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    if request.method != 'POST':&#13;&#10;        return JsonResponse(&#13;&#10;                {'status': 'error', 'message': 'Only POST method is allowed'},&#13;&#10;                status = 405&#13;&#10;                )&#13;&#10;    &#13;&#10;    try:&#13;&#10;        # Parse and validate JSON data&#13;&#10;        try:&#13;&#10;            data = json.loads(request.body.decode('utf-8'))&#13;&#10;        except json.JSONDecodeError:&#13;&#10;            return JsonResponse(&#13;&#10;                    {'status': 'error', 'message': 'Invalid JSON format'},&#13;&#10;                    status = 400&#13;&#10;                    )&#13;&#10;        &#13;&#10;        # Validate required fields&#13;&#10;        required_fields = [f'sensor{i}' for i in range(1, 14)] + ['device_id']&#13;&#10;        missing_fields = [field for field in required_fields if field not in data]&#13;&#10;        &#13;&#10;        if missing_fields:&#13;&#10;            return JsonResponse(&#13;&#10;                    {'status': 'error', 'message': f'Missing required fields: {&quot;, &quot;.join(missing_fields)}'},&#13;&#10;                    status = 400&#13;&#10;                    )&#13;&#10;        &#13;&#10;        # Validate sensor values&#13;&#10;        try:&#13;&#10;            sensor_data = {&#13;&#10;                    f'sensor{i}': float(data[f'sensor{i}'])&#13;&#10;                    for i in range(1, 14)&#13;&#10;                    }&#13;&#10;        except (ValueError, TypeError):&#13;&#10;            return JsonResponse(&#13;&#10;                    {'status': 'error', 'message': 'All sensor values must be numbers'},&#13;&#10;                    status = 400&#13;&#10;                    )&#13;&#10;        &#13;&#10;        # Validate battery level&#13;&#10;        battery_level = float(data.get('battery', 0))&#13;&#10;        if not 0 &lt;= battery_level &lt;= 100:&#13;&#10;            return JsonResponse(&#13;&#10;                    {'status': 'error', 'message': 'Battery level must be between 0 and 100'},&#13;&#10;                    status = 400&#13;&#10;                    )&#13;&#10;        &#13;&#10;        # Create and save new reading&#13;&#10;        reading = SensorReading(&#13;&#10;                timestamp = timezone.now(),&#13;&#10;                device_id = data['device_id'],&#13;&#10;                battery_level = battery_level,&#13;&#10;                **sensor_data&#13;&#10;                )&#13;&#10;        reading.save()&#13;&#10;        &#13;&#10;        return JsonResponse({&#13;&#10;                'status': 'success',&#13;&#10;                'message': 'Data saved successfully',&#13;&#10;                'reading_id': reading.id,&#13;&#10;                'timestamp': reading.timestamp.isoformat()&#13;&#10;                })&#13;&#10;    &#13;&#10;    except Exception as e:&#13;&#10;        # Log the error for debugging&#13;&#10;        import logging&#13;&#10;        logger = logging.getLogger(__name__)&#13;&#10;        logger.error(f&quot;Error processing sensor data: {str(e)}&quot;, exc_info = True)&#13;&#10;        &#13;&#10;        return JsonResponse(&#13;&#10;                {'status': 'error', 'message': 'Internal server error'},&#13;&#10;                status = 500&#13;&#10;                )&#13;&#10;&#13;&#10;def custom_error_view(request, exception = None):&#13;&#10;&#9;&quot;&quot;&quot;&#13;&#10;&#9;Custom error view that shows detailed technical information for debugging,&#13;&#10;&#9;while maintaining a user-friendly interface.&#13;&#10;&#9;&quot;&quot;&quot;&#13;&#10;&#9;# Get exception information&#13;&#10;&#9;exc_type, exc_value, exc_traceback = sys.exc_info()&#13;&#10;&#9;error_traceback = traceback.format_exception(exc_type, exc_value, exc_traceback)&#13;&#10;&#9;&#13;&#10;&#9;# Build context with detailed error information&#13;&#10;&#9;context = {&#13;&#10;&#9;&#9;&#9;'error_type': exc_type.__name__ if exc_type else 'Unknown Error',&#13;&#10;&#9;&#9;&#9;'error_message': str(exc_value) if exc_value else 'No error message available',&#13;&#10;&#9;&#9;&#9;'error_traceback': error_traceback,&#13;&#10;&#9;&#9;&#9;'timestamp': timezone.now(),&#13;&#10;&#9;&#9;&#9;'request_path': request.path,&#13;&#10;&#9;&#9;&#9;'request_method': request.method,&#13;&#10;&#9;&#9;&#9;'debug_mode': settings.DEBUG,&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#13;&#10;&#9;# Add additional debug information if in DEBUG mode&#13;&#10;&#9;if settings.DEBUG:&#13;&#10;&#9;&#9;from django.http import QueryDict&#13;&#10;&#9;&#9;context.update({&#13;&#10;&#9;&#9;&#9;&#9;'request_headers': dict(request.headers),&#13;&#10;&#9;&#9;&#9;&#9;'request_params': QueryDict(request.META.get('QUERY_STRING', '')),&#13;&#10;&#9;&#9;&#9;&#9;'request_post': request.POST if request.method == 'POST' else None,&#13;&#10;&#9;&#9;&#9;&#9;})&#13;&#10;&#9;&#13;&#10;&#9;# Determine the status code&#13;&#10;&#9;status_code = 500&#13;&#10;&#9;if hasattr(exception, 'status_code'):&#13;&#10;&#9;&#9;status_code = exception.status_code&#13;&#10;&#9;context['status_code'] = status_code&#13;&#10;&#9;&#13;&#10;&#9;# Log the error&#13;&#10;&#9;logger.error(&#13;&#10;&#9;&#9;&#9;f&quot;Error {status_code} at {request.path}\n&quot;&#13;&#10;&#9;&#9;&#9;f&quot;Type: {context['error_type']}\n&quot;&#13;&#10;&#9;&#9;&#9;f&quot;Message: {context['error_message']}\n&quot;&#13;&#10;&#9;&#9;&#9;f&quot;Traceback:\n{''.join(error_traceback)}&quot;&#13;&#10;&#9;&#9;&#9;)&#13;&#10;&#9;&#13;&#10;&#9;return render(request, 'error.html', context, status = status_code)&#13;&#10;&#13;&#10;@require_GET&#13;&#10;def latest_sensor_data(request):&#13;&#10;    latest = SensorReading.objects.order_by('-timestamp').first()&#13;&#10;    if not latest:&#13;&#10;        return JsonResponse({'error': 'No data available'}, status=404)&#13;&#10;    return JsonResponse({&#13;&#10;        'sensor1': latest.sensor1,&#13;&#10;        'sensor2': latest.sensor2,&#13;&#10;        'timestamp': latest.timestamp.strftime('%H:%M'),&#13;&#10;        'battery': latest.battery_level,&#13;&#10;    })&#13;&#10;&#13;&#10;def dashboard(request):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Dashboard view showing charts and summary of last 24 hours&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    try:&#13;&#10;        # Get data from last 24 hours&#13;&#10;        time_threshold = timezone.now() - timedelta(hours=24)&#13;&#10;        readings = SensorReading.objects.filter(&#13;&#10;            timestamp__gte=time_threshold&#13;&#10;        ).order_by('timestamp')&#13;&#10;        &#13;&#10;        # Get summary statistics&#13;&#10;        summary = {&#13;&#10;                'temperature': {&#13;&#10;                        'current': readings.last().sensor1 if readings.exists() else None,&#13;&#10;                        'avg': readings.aggregate(Avg('sensor1'))['sensor1__avg'],&#13;&#10;                        'max': readings.aggregate(Max('sensor1'))['sensor1__max'],&#13;&#10;                        'min': readings.aggregate(Min('sensor1'))['sensor1__min']&#13;&#10;                        },&#13;&#10;                'humidity': {&#13;&#10;                        'current': readings.last().sensor7 if readings.exists() else None,&#13;&#10;                        'avg': readings.aggregate(Avg('sensor7'))['sensor7__avg'],&#13;&#10;                        'max': readings.aggregate(Max('sensor7'))['sensor7__max'],&#13;&#10;                        'min': readings.aggregate(Min('sensor7'))['sensor7__min']&#13;&#10;                        },&#13;&#10;                'battery': {&#13;&#10;                        'current': readings.last().battery_level if readings.exists() else None,&#13;&#10;                        'avg': readings.aggregate(Avg('battery_level'))['battery_level__avg'],&#13;&#10;                        'min': readings.aggregate(Min('battery_level'))['battery_level__min']&#13;&#10;                        }&#13;&#10;                }&#13;&#10;        &#13;&#10;        context = {&#13;&#10;                'readings': readings,&#13;&#10;                'summary': summary,&#13;&#10;                'sensor_names': {&#13;&#10;                        1: &quot;Temperatura Externa 1&quot;,&#13;&#10;                        2: &quot;Temperatura Externa 2&quot;,&#13;&#10;                        3: &quot;Temperatura Solo 1&quot;,&#13;&#10;                        4: &quot;Temperatura Solo 2&quot;,&#13;&#10;                        5: &quot;Temperatura Ar 1&quot;,&#13;&#10;                        6: &quot;Temperatura Ar 2&quot;,&#13;&#10;                        7: &quot;Umidade Ar 1&quot;,&#13;&#10;                        8: &quot;Umidade Ar 2&quot;,&#13;&#10;                        9: &quot;Umidade Solo&quot;,&#13;&#10;                        10: &quot;Radiação UV 1&quot;,&#13;&#10;                        11: &quot;Radiação UV 2&quot;,&#13;&#10;                        12: &quot;Velocidade Vento 1&quot;,&#13;&#10;                        13: &quot;Velocidade Vento 2&quot;&#13;&#10;                        },&#13;&#10;                'units': {&#13;&#10;                        1: &quot;°C&quot;, 2: &quot;°C&quot;, 3: &quot;°C&quot;, 4: &quot;°C&quot;, 5: &quot;°C&quot;, 6: &quot;°C&quot;,&#13;&#10;                        7: &quot;%&quot;, 8: &quot;%&quot;, 9: &quot;%&quot;,&#13;&#10;                        10: &quot;UV&quot;, 11: &quot;UV&quot;,&#13;&#10;                        12: &quot;m/s&quot;, 13: &quot;m/s&quot;&#13;&#10;                        }&#13;&#10;                }&#13;&#10;        return render(request, 'dashboard.html', context)&#13;&#10;    &#13;&#10;    except Exception as e:&#13;&#10;        import logging&#13;&#10;        logger = logging.getLogger(__name__)&#13;&#10;        logger.error(f&quot;Error in dashboard view: {str(e)}&quot;, exc_info = True)&#13;&#10;        return render(request, 'error.html', {'error': str(e)})&#13;&#10;&#13;&#10;&#13;&#10;def data_table(request):&#13;&#10;&#9;&quot;&quot;&quot;&#13;&#10;&#9;View showing paginated table with all sensor readings&#13;&#10;&#9;&quot;&quot;&quot;&#13;&#10;&#9;try:&#13;&#10;&#9;&#9;all_readings = SensorReading.objects.all().order_by('-timestamp')&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;# Pagination - 50 items per page&#13;&#10;&#9;&#9;paginator = Paginator(all_readings, 50)&#13;&#10;&#9;&#9;page_number = request.GET.get('page')&#13;&#10;&#9;&#9;page_obj = paginator.get_page(page_number)&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;context = {&#13;&#10;&#9;&#9;&#9;&#9;'page_obj': page_obj,&#13;&#10;&#9;&#9;&#9;&#9;'sensor_names': {&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;1: &quot;Temp 1&quot;, 2: &quot;Temp 2&quot;, 3: &quot;Temp 3&quot;, 4: &quot;Temp 4&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;5: &quot;Temp 5&quot;, 6: &quot;Temp 6&quot;, 7: &quot;Hum 1&quot;, 8: &quot;Hum 2&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;9: &quot;Hum 3&quot;, 10: &quot;UV 1&quot;, 11: &quot;UV 2&quot;, 12: &quot;Vento 1&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;13: &quot;Vento 2&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#13;&#10;&#9;&#9;&#9;&#9;'units': {&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;1: &quot;°C&quot;, 2: &quot;°C&quot;, 3: &quot;°C&quot;, 4: &quot;°C&quot;, 5: &quot;°C&quot;, 6: &quot;°C&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;7: &quot;%&quot;, 8: &quot;%&quot;, 9: &quot;%&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;10: &quot;UV&quot;, 11: &quot;UV&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;12: &quot;m/s&quot;, 13: &quot;m/s&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;return render(request, 'data_table.html', context)&#13;&#10;&#9;&#13;&#10;&#9;except Exception as e:&#13;&#10;&#9;&#9;import logging&#13;&#10;&#9;&#9;logger = logging.getLogger(__name__)&#13;&#10;&#9;&#9;logger.error(f&quot;Error in data_table view: {str(e)}&quot;, exc_info = True)&#13;&#10;&#9;&#9;return render(request, 'error.html', {'error': str(e)})&#13;&#10;&#13;&#10;&#13;&#10;class RegisterForm(forms.Form):&#13;&#10;    first_name = forms.CharField(label='Nome', max_length=30)&#13;&#10;    last_name = forms.CharField(label='Sobrenome', max_length=30)&#13;&#10;    username = forms.CharField(label='Usuário', max_length=30)&#13;&#10;    email = forms.EmailField(label='E-mail')&#13;&#10;    password = forms.CharField(label='Senha', widget=forms.PasswordInput)&#13;&#10;    group = forms.ChoiceField(label='Grupo', choices=[&#13;&#10;        ('adm', 'Administrador'),&#13;&#10;        ('ic', 'Iniciação Científica'),&#13;&#10;        ('mestrado', 'Mestrado'),&#13;&#10;        ('doutorado', 'Doutorado'),&#13;&#10;        ('professor', 'Professor'),&#13;&#10;    ])&#13;&#10;&#13;&#10;def register_view(request):&#13;&#10;    form = RegisterForm(request.POST or None)&#13;&#10;    message = None&#13;&#10;    if request.method == 'POST' and form.is_valid():&#13;&#10;        username = form.cleaned_data['username']&#13;&#10;        password = form.cleaned_data['password']&#13;&#10;        first_name = form.cleaned_data['first_name']&#13;&#10;        last_name = form.cleaned_data['last_name']&#13;&#10;        email = form.cleaned_data['email']&#13;&#10;        group_name = form.cleaned_data['group']&#13;&#10;        # Validação extra do email&#13;&#10;        try:&#13;&#10;            validate_email(email)&#13;&#10;        except ValidationError:&#13;&#10;            form.add_error('email', 'E-mail inválido.')&#13;&#10;        else:&#13;&#10;            if User.objects.filter(username=username).exists():&#13;&#10;                form.add_error('username', 'Usuário já existe.')&#13;&#10;            elif User.objects.filter(email=email).exists():&#13;&#10;                form.add_error('email', 'E-mail já cadastrado.')&#13;&#10;            else:&#13;&#10;                user = User.objects.create_user(&#13;&#10;                    username=username,&#13;&#10;                    password=password,&#13;&#10;                    first_name=first_name,&#13;&#10;                    last_name=last_name,&#13;&#10;                    email=email,&#13;&#10;                    is_active=False&#13;&#10;                )&#13;&#10;                # Adiciona ao grupo&#13;&#10;                group, created = Group.objects.get_or_create(name=group_name)&#13;&#10;                user.groups.add(group)&#13;&#10;                message = 'Cadastro realizado! Aguarde o administrador liberar seu acesso.'&#13;&#10;    return render(request, 'register.html', {'form': form, 'message': message})&#13;&#10;&#13;&#10;class LoginForm(forms.Form):&#13;&#10;    username = forms.CharField()&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput)&#13;&#10;&#13;&#10;def login_view(request):&#13;&#10;    form = LoginForm(request.POST or None)&#13;&#10;    error_message = None&#13;&#10;    grupos_validos = ['adm', 'ic', 'mestrado', 'doutorado', 'professor']&#13;&#10;    if request.method == 'POST' and form.is_valid():&#13;&#10;        user = authenticate(request, username=form.cleaned_data['username'], password=form.cleaned_data['password'])&#13;&#10;        if user is not None:&#13;&#10;            if user.is_active:&#13;&#10;                # Verifica se o usuário pertence a algum grupo válido&#13;&#10;                if user.groups.filter(name__in=grupos_validos).exists():&#13;&#10;                    login(request, user)&#13;&#10;                    return redirect('home')&#13;&#10;                else:&#13;&#10;                    error_message = 'Seu usuário não pertence a nenhum grupo autorizado.'&#13;&#10;            else:&#13;&#10;                error_message = 'Seu cadastro ainda não foi autorizado pelo administrador.'&#13;&#10;        else:&#13;&#10;            error_message = 'Usuário ou senha inválidos.'&#13;&#10;    return render(request, 'login.html', {'form': form, 'error_message': error_message})&#13;&#10;&#13;&#10;@login_required(login_url='login')&#13;&#10;def dashboard(request):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Dashboard view showing charts and summary of last 24 hours&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    try:&#13;&#10;        # Get data from last 24 hours&#13;&#10;        time_threshold = timezone.now() - timedelta(hours=24)&#13;&#10;        readings = SensorReading.objects.filter(&#13;&#10;            timestamp__gte=time_threshold&#13;&#10;        ).order_by('timestamp')&#13;&#10;        &#13;&#10;        # Get summary statistics&#13;&#10;        summary = {&#13;&#10;                'temperature': {&#13;&#10;                        'current': readings.last().sensor1 if readings.exists() else None,&#13;&#10;                        'avg': readings.aggregate(Avg('sensor1'))['sensor1__avg'],&#13;&#10;                        'max': readings.aggregate(Max('sensor1'))['sensor1__max'],&#13;&#10;                        'min': readings.aggregate(Min('sensor1'))['sensor1__min']&#13;&#10;                        },&#13;&#10;                'humidity': {&#13;&#10;                        'current': readings.last().sensor7 if readings.exists() else None,&#13;&#10;                        'avg': readings.aggregate(Avg('sensor7'))['sensor7__avg'],&#13;&#10;                        'max': readings.aggregate(Max('sensor7'))['sensor7__max'],&#13;&#10;                        'min': readings.aggregate(Min('sensor7'))['sensor7__min']&#13;&#10;                        },&#13;&#10;                'battery': {&#13;&#10;                        'current': readings.last().battery_level if readings.exists() else None,&#13;&#10;                        'avg': readings.aggregate(Avg('battery_level'))['battery_level__avg'],&#13;&#10;                        'min': readings.aggregate(Min('battery_level'))['battery_level__min']&#13;&#10;                        }&#13;&#10;                }&#13;&#10;        &#13;&#10;        context = {&#13;&#10;                'readings': readings,&#13;&#10;                'summary': summary,&#13;&#10;                'sensor_names': {&#13;&#10;                        1: &quot;Temperatura Externa 1&quot;,&#13;&#10;                        2: &quot;Temperatura Externa 2&quot;,&#13;&#10;                        3: &quot;Temperatura Solo 1&quot;,&#13;&#10;                        4: &quot;Temperatura Solo 2&quot;,&#13;&#10;                        5: &quot;Temperatura Ar 1&quot;,&#13;&#10;                        6: &quot;Temperatura Ar 2&quot;,&#13;&#10;                        7: &quot;Umidade Ar 1&quot;,&#13;&#10;                        8: &quot;Umidade Ar 2&quot;,&#13;&#10;                        9: &quot;Umidade Solo&quot;,&#13;&#10;                        10: &quot;Radiação UV 1&quot;,&#13;&#10;                        11: &quot;Radiação UV 2&quot;,&#13;&#10;                        12: &quot;Velocidade Vento 1&quot;,&#13;&#10;                        13: &quot;Velocidade Vento 2&quot;&#13;&#10;                        },&#13;&#10;                'units': {&#13;&#10;                        1: &quot;°C&quot;, 2: &quot;°C&quot;, 3: &quot;°C&quot;, 4: &quot;°C&quot;, 5: &quot;°C&quot;, 6: &quot;°C&quot;,&#13;&#10;                        7: &quot;%&quot;, 8: &quot;%&quot;, 9: &quot;%&quot;,&#13;&#10;                        10: &quot;UV&quot;, 11: &quot;UV&quot;,&#13;&#10;                        12: &quot;m/s&quot;, 13: &quot;m/s&quot;&#13;&#10;                        }&#13;&#10;                }&#13;&#10;        return render(request, 'dashboard.html', context)&#13;&#10;    &#13;&#10;    except Exception as e:&#13;&#10;        import logging&#13;&#10;        logger = logging.getLogger(__name__)&#13;&#10;        logger.error(f&quot;Error in dashboard view: {str(e)}&quot;, exc_info = True)&#13;&#10;        return render(request, 'error.html', {'error': str(e)})&#13;&#10;&#13;&#10;&#13;&#10;@login_required(login_url='login')&#13;&#10;def data_table(request):&#13;&#10;&#9;&quot;&quot;&quot;&#13;&#10;&#9;View showing paginated table with all sensor readings&#13;&#10;&#9;&quot;&quot;&quot;&#13;&#10;&#9;try:&#13;&#10;&#9;&#9;all_readings = SensorReading.objects.all().order_by('-timestamp')&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;# Pagination - 50 items per page&#13;&#10;&#9;&#9;paginator = Paginator(all_readings, 50)&#13;&#10;&#9;&#9;page_number = request.GET.get('page')&#13;&#10;&#9;&#9;page_obj = paginator.get_page(page_number)&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;context = {&#13;&#10;&#9;&#9;&#9;&#9;'page_obj': page_obj,&#13;&#10;&#9;&#9;&#9;&#9;'sensor_names': {&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;1: &quot;Temp 1&quot;, 2: &quot;Temp 2&quot;, 3: &quot;Temp 3&quot;, 4: &quot;Temp 4&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;5: &quot;Temp 5&quot;, 6: &quot;Temp 6&quot;, 7: &quot;Hum 1&quot;, 8: &quot;Hum 2&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;9: &quot;Hum 3&quot;, 10: &quot;UV 1&quot;, 11: &quot;UV 2&quot;, 12: &quot;Vento 1&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;13: &quot;Vento 2&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#13;&#10;&#9;&#9;&#9;&#9;'units': {&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;1: &quot;°C&quot;, 2: &quot;°C&quot;, 3: &quot;°C&quot;, 4: &quot;°C&quot;, 5: &quot;°C&quot;, 6: &quot;°C&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;7: &quot;%&quot;, 8: &quot;%&quot;, 9: &quot;%&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;10: &quot;UV&quot;, 11: &quot;UV&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;12: &quot;m/s&quot;, 13: &quot;m/s&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;return render(request, 'data_table.html', context)&#13;&#10;&#9;&#13;&#10;&#9;except Exception as e:&#13;&#10;&#9;&#9;import logging&#13;&#10;&#9;&#9;logger = logging.getLogger(__name__)&#13;&#10;&#9;&#9;logger.error(f&quot;Error in data_table view: {str(e)}&quot;, exc_info = True)&#13;&#10;&#9;&#9;return render(request, 'error.html', {'error': str(e)})&#13;&#10;&#13;&#10;&#13;&#10;@login_required(login_url='login')&#13;&#10;def dashboard_project(request, project):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Dashboard dinâmico por projeto&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    # Exemplo: filtrar por projeto, aqui só Breeze Vegetal&#13;&#10;    if project == 'breeze':&#13;&#10;        time_threshold = timezone.now() - timedelta(hours=24)&#13;&#10;        readings = SensorReading.objects.filter(timestamp__gte=time_threshold).order_by('timestamp')&#13;&#10;        context = {&#13;&#10;            'readings': readings,&#13;&#10;            'project': 'Breeze Vegetal',&#13;&#10;        }&#13;&#10;        return render(request, 'dashboard.html', context)&#13;&#10;    # Adicione outros projetos aqui&#13;&#10;    return render(request, 'error.html', {'error': 'Projeto não encontrado'})&#13;&#10;&#13;&#10;@login_required(login_url='login')&#13;&#10;def data_table_project(request, project):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Tabela de dados dinâmica por projeto&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    if project == 'breeze':&#13;&#10;        all_readings = SensorReading.objects.all().order_by('-timestamp')&#13;&#10;        paginator = Paginator(all_readings, 50)&#13;&#10;        page_number = request.GET.get('page')&#13;&#10;        page_obj = paginator.get_page(page_number)&#13;&#10;        context = {&#13;&#10;            'page_obj': page_obj,&#13;&#10;            'project': 'Breeze Vegetal',&#13;&#10;        }&#13;&#10;        return render(request, 'data_table.html', context)&#13;&#10;    # Adicione outros projetos aqui&#13;&#10;    return render(request, 'error.html', {'error': 'Projeto não encontrado'})&#13;&#10;&#13;&#10;class LoginForm(forms.Form):&#13;&#10;    username = forms.CharField()&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput)&#13;&#10;&#13;&#10;def login_view(request):&#13;&#10;    form = LoginForm(request.POST or None)&#13;&#10;    error_message = None&#13;&#10;    grupos_validos = ['adm', 'ic', 'mestrado', 'doutorado', 'professor']&#13;&#10;    if request.method == 'POST' and form.is_valid():&#13;&#10;        user = authenticate(request, username=form.cleaned_data['username'], password=form.cleaned_data['password'])&#13;&#10;        if user is not None:&#13;&#10;            if user.is_active:&#13;&#10;                # Verifica se o usuário pertence a algum grupo válido&#13;&#10;                if user.groups.filter(name__in=grupos_validos).exists():&#13;&#10;                    login(request, user)&#13;&#10;                    return redirect('home')&#13;&#10;                else:&#13;&#10;                    error_message = 'Seu usuário não pertence a nenhum grupo autorizado.'&#13;&#10;            else:&#13;&#10;                error_message = 'Seu cadastro ainda não foi autorizado pelo administrador.'&#13;&#10;        else:&#13;&#10;            error_message = 'Usuário ou senha inválidos.'&#13;&#10;    return render(request, 'login.html', {'form': form, 'error_message': error_message})&#13;&#10;&#13;&#10;def logout_view(request):&#13;&#10;    logout(request)&#13;&#10;    return redirect('login')" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/base.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/base.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-br&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Sistema de Monitoramentos do Ecotecnologias&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css&quot;&gt;&#10;    {% block style %} {% endblock%}&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-success&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;a class=&quot;navbar-brand&quot; href=&quot;{% url 'home' %}&quot;&gt;&#10;                &lt;i class=&quot;bi bi-tree-fill me-2&quot;&gt;&lt;/i&gt;EcoMonitoramentos&#10;            &lt;/a&gt;&#10;            &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#navbarNav&quot;&gt;&#10;                &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;&#10;            &lt;/button&gt;&#10;            &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNav&quot;&gt;&#10;                &lt;ul class=&quot;navbar-nav ms-auto&quot;&gt;&#10;                    &lt;li class=&quot;nav-item&quot;&gt;&#10;                        &lt;a class=&quot;nav-link active&quot; href=&quot;{% url 'dashboard' %}&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-speedometer2 me-1&quot;&gt;&lt;/i&gt;Dashboard&#10;                        &lt;/a&gt;&#10;                    &lt;/li&gt;&#10;                    &lt;li class=&quot;nav-item&quot;&gt;&#10;                        &lt;a class=&quot;nav-link&quot; href=&quot;{% url 'data_table' %}&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-table me-1&quot;&gt;&lt;/i&gt;Tabela de Dados&#10;                        &lt;/a&gt;&#10;                    &lt;/li&gt;&#10;                &lt;/ul&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;        {% block content %}{% endblock %}&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js&quot;&gt;&lt;/script&gt;&#10;    {% block scripts %}{% endblock %}&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html lang=&quot;pt-br&quot;&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#13;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#13;&#10;    &lt;title&gt;Sistema de Monitoramentos do Ecotecnologias&lt;/title&gt;&#13;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#13;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css&quot;&gt;&#13;&#10;    {% block style %} {% endblock%}&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body&gt;&#13;&#10;    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-success&quot;&gt;&#13;&#10;        &lt;div class=&quot;container&quot;&gt;&#13;&#10;            &lt;a class=&quot;navbar-brand&quot; href=&quot;{% url 'home' %}&quot;&gt;&#13;&#10;                &lt;i class=&quot;bi bi-tree-fill me-2&quot;&gt;&lt;/i&gt;EcoMonitoramentos&#13;&#10;            &lt;/a&gt;&#13;&#10;            &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#navbarNav&quot;&gt;&#13;&#10;                &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;&#13;&#10;            &lt;/button&gt;&#13;&#10;            &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNav&quot;&gt;&#13;&#10;                &lt;ul class=&quot;navbar-nav ms-auto&quot;&gt;&#13;&#10;                    &lt;li class=&quot;nav-item&quot;&gt;&#13;&#10;                        &lt;a class=&quot;nav-link active&quot; href=&quot;{% url 'dashboard' %}&quot;&gt;&#13;&#10;                            &lt;i class=&quot;bi bi-speedometer2 me-1&quot;&gt;&lt;/i&gt;Dashboard&#13;&#10;                        &lt;/a&gt;&#13;&#10;                    &lt;/li&gt;&#13;&#10;                    &lt;li class=&quot;nav-item&quot;&gt;&#13;&#10;                        &lt;a class=&quot;nav-link&quot; href=&quot;{% url 'data_table' %}&quot;&gt;&#13;&#10;                            &lt;i class=&quot;bi bi-table me-1&quot;&gt;&lt;/i&gt;Tabela de Dados&#13;&#10;                        &lt;/a&gt;&#13;&#10;                    &lt;/li&gt;&#13;&#10;                &lt;/ul&gt;&#13;&#10;                {% if user.is_authenticated %}&#13;&#10;                &lt;ul class=&quot;navbar-nav ms-3&quot;&gt;&#13;&#10;                    &lt;li class=&quot;nav-item&quot;&gt;&#13;&#10;                        &lt;a class=&quot;nav-link&quot; href=&quot;{% url 'logout' %}&quot;&gt;&#13;&#10;                            &lt;i class=&quot;bi bi-box-arrow-right me-1&quot;&gt;&lt;/i&gt;Sair&#13;&#10;                        &lt;/a&gt;&#13;&#10;                    &lt;/li&gt;&#13;&#10;                &lt;/ul&gt;&#13;&#10;                {% endif %}&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;    &lt;/nav&gt;&#13;&#10;        {% block content %}{% endblock %}&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#13;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js&quot;&gt;&lt;/script&gt;&#13;&#10;    {% block scripts %}{% endblock %}&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/register.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/register.html" />
              <option name="originalContent" value="{% extends &quot;base.html&quot; %}&#10;{% block content %}&#10;&lt;div class=&quot;row justify-content-center mt-5&quot;&gt;&#10;    &lt;div class=&quot;col-md-4&quot;&gt;&#10;        &lt;h2 class=&quot;mb-4 text-center&quot;&gt;Cadastro&lt;/h2&gt;&#10;        {% if form.errors %}&#10;            &lt;div class=&quot;alert alert-danger&quot;&gt;{{ form.errors }}&lt;/div&gt;&#10;        {% endif %}&#10;        {% if message %}&#10;            &lt;div class=&quot;alert alert-info&quot;&gt;{{ message }}&lt;/div&gt;&#10;        {% endif %}&#10;        &lt;form method=&quot;post&quot;&gt;&#10;            {% csrf_token %}&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;first_name&quot; class=&quot;form-label&quot;&gt;Nome&lt;/label&gt;&#10;                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;first_name&quot; name=&quot;first_name&quot; required&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;last_name&quot; class=&quot;form-label&quot;&gt;Sobrenome&lt;/label&gt;&#10;                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;last_name&quot; name=&quot;last_name&quot; required&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;username&quot; class=&quot;form-label&quot;&gt;Usuário&lt;/label&gt;&#10;                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;email&quot; class=&quot;form-label&quot;&gt;E-mail&lt;/label&gt;&#10;                &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;email&quot; name=&quot;email&quot; required&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;password&quot; class=&quot;form-label&quot;&gt;Senha&lt;/label&gt;&#10;                &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;&#10;            &lt;/div&gt;&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn btn-success w-100&quot;&gt;Cadastrar&lt;/button&gt;&#10;        &lt;/form&gt;&#10;        &lt;p class=&quot;mt-3 text-center text-muted&quot;&gt;Após o cadastro, aguarde o administrador liberar seu acesso.&lt;/p&gt;&#10;        &lt;div class=&quot;text-center mt-3&quot;&gt;&#10;            &lt;a href=&quot;{% url 'login' %}&quot; class=&quot;btn btn-link&quot;&gt;Já possui cadastro? Faça login&lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="{% extends &quot;base.html&quot; %}&#13;&#10;{% block content %}&#13;&#10;&lt;div class=&quot;row justify-content-center mt-5&quot;&gt;&#13;&#10;    &lt;div class=&quot;col-md-4&quot;&gt;&#13;&#10;        &lt;h2 class=&quot;mb-4 text-center&quot;&gt;Cadastro&lt;/h2&gt;&#13;&#10;        {% if form.errors %}&#13;&#10;            &lt;div class=&quot;alert alert-danger&quot;&gt;{{ form.errors }}&lt;/div&gt;&#13;&#10;        {% endif %}&#13;&#10;        {% if message %}&#13;&#10;            &lt;div class=&quot;alert alert-info&quot;&gt;{{ message }}&lt;/div&gt;&#13;&#10;        {% endif %}&#13;&#10;        &lt;form method=&quot;post&quot;&gt;&#13;&#10;            {% csrf_token %}&#13;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;                &lt;label for=&quot;first_name&quot; class=&quot;form-label&quot;&gt;Nome&lt;/label&gt;&#13;&#10;                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;first_name&quot; name=&quot;first_name&quot; required&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;                &lt;label for=&quot;last_name&quot; class=&quot;form-label&quot;&gt;Sobrenome&lt;/label&gt;&#13;&#10;                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;last_name&quot; name=&quot;last_name&quot; required&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;                &lt;label for=&quot;username&quot; class=&quot;form-label&quot;&gt;Usuário&lt;/label&gt;&#13;&#10;                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;                &lt;label for=&quot;email&quot; class=&quot;form-label&quot;&gt;E-mail&lt;/label&gt;&#13;&#10;                &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;email&quot; name=&quot;email&quot; required&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;                &lt;label for=&quot;password&quot; class=&quot;form-label&quot;&gt;Senha&lt;/label&gt;&#13;&#10;                &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;                &lt;label for=&quot;group&quot; class=&quot;form-label&quot;&gt;Grupo&lt;/label&gt;&#13;&#10;                &lt;select class=&quot;form-select&quot; id=&quot;group&quot; name=&quot;group&quot; required&gt;&#13;&#10;                    &lt;option value=&quot;&quot;&gt;Selecione...&lt;/option&gt;&#13;&#10;                    &lt;option value=&quot;adm&quot;&gt;Administrador&lt;/option&gt;&#13;&#10;                    &lt;option value=&quot;ic&quot;&gt;Iniciação Científica&lt;/option&gt;&#13;&#10;                    &lt;option value=&quot;mestrado&quot;&gt;Mestrado&lt;/option&gt;&#13;&#10;                    &lt;option value=&quot;doutorado&quot;&gt;Doutorado&lt;/option&gt;&#13;&#10;                    &lt;option value=&quot;professor&quot;&gt;Professor&lt;/option&gt;&#13;&#10;                &lt;/select&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn btn-success w-100&quot;&gt;Cadastrar&lt;/button&gt;&#13;&#10;        &lt;/form&gt;&#13;&#10;        &lt;p class=&quot;mt-3 text-center text-muted&quot;&gt;Após o cadastro, aguarde o administrador liberar seu acesso.&lt;/p&gt;&#13;&#10;        &lt;div class=&quot;text-center mt-3&quot;&gt;&#13;&#10;            &lt;a href=&quot;{% url 'login' %}&quot; class=&quot;btn btn-link&quot;&gt;Já possui cadastro? Faça login&lt;/a&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&lt;/div&gt;&#13;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/select_dashboard.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/select_dashboard.html" />
              <option name="updatedContent" value="{% extends &quot;base.html&quot; %}&#10;{% block content %}&#10;&lt;h1 class=&quot;mb-4 text-center&quot;&gt;Selecione o Dashboard&lt;/h1&gt;&#10;&lt;div class=&quot;d-flex gap-4 justify-content-center&quot;&gt;&#10;    &lt;a href=&quot;{% url 'dashboard_project' 'breeze' %}&quot; class=&quot;btn btn-primary btn-lg&quot;&gt;&#10;        &lt;i class=&quot;bi bi-tree-fill me-2&quot;&gt;&lt;/i&gt;Breeze Vegetal&#10;    &lt;/a&gt;&#10;    &lt;!-- Adicione outros projetos aqui --&gt;&#10;    &lt;!-- &lt;a href=&quot;{% url 'dashboard_project' 'outro' %}&quot; class=&quot;btn btn-secondary btn-lg&quot;&gt;Outro Projeto&lt;/a&gt; --&gt;&#10;&lt;/div&gt;&#10;{% endblock %}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/select_table.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/select_table.html" />
              <option name="updatedContent" value="{% extends &quot;base.html&quot; %}&#10;{% block content %}&#10;&lt;h1 class=&quot;mb-4 text-center&quot;&gt;Selecione a Tabela de Dados&lt;/h1&gt;&#10;&lt;div class=&quot;d-flex gap-4 justify-content-center&quot;&gt;&#10;    &lt;a href=&quot;{% url 'data_table_project' 'breeze' %}&quot; class=&quot;btn btn-success btn-lg&quot;&gt;&#10;        &lt;i class=&quot;bi bi-tree-fill me-2&quot;&gt;&lt;/i&gt;Breeze Vegetal&#10;    &lt;/a&gt;&#10;    &lt;!-- Adicione outros projetos aqui --&gt;&#10;    &lt;!-- &lt;a href=&quot;{% url 'data_table_project' 'outro' %}&quot; class=&quot;btn btn-secondary btn-lg&quot;&gt;Outro Projeto&lt;/a&gt; --&gt;&#10;&lt;/div&gt;&#10;{% endblock %}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>