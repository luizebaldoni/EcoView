<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# EcoView - Sistema de Visualização de Dados em Tempo Real&#10;&#10;![Django](https://img.shields.io/badge/Django-092E20?style=for-the-badge&amp;logo=django&amp;logoColor=white)&#10;![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&amp;logo=python&amp;logoColor=white)&#10;![Bootstrap](https://img.shields.io/badge/Bootstrap-563D7C?style=for-the-badge&amp;logo=bootstrap&amp;logoColor=white)&#10;&#10;Sistema completo para coleta, armazenamento e visualização de dados em tempo real de sistemas desenvolvidos pelo Grupo de Pesquisas em Modelagem HidroAmbiental e Ecotecnologias da UFSM.&#10;&#10;## Sumário&#10;- [Funcionalidades](#funcionalidades)&#10;- [Tecnologias Utilizadas](#️-tecnologias-utilizadas)&#10;- [Como Usar](#como-usar)&#10;- [Arquitetura de Software](#arquitetura-de-software)&#10;- [Contribuição](#contribuição)&#10;- [Licença](#licença)&#10;- [Contato](#contato)&#10;&#10;## Funcionalidades&#10;&#10;- Coleta de dados em tempo real via API REST&#10;- Dashboard interativo com gráficos dinâmicos (Chart.js)&#10;- Gerenciamento de dados com tabelas paginadas e filtros&#10;- Suporte a múltiplos sensores e dispositivos&#10;- Exportação de dados (CSV, JSON, Excel)&#10;- Atualização de firmware OTA (Over the Air)&#10;&#10;## ️ Tecnologias Utilizadas&#10;&#10;| Componente | Tecnologias                                                         |&#10;|------------|---------------------------------------------------------------------|&#10;| Backend    | Python 3.9+, Django 4.2, Django REST Framework, SQLite              |&#10;| Firmware   | C++ (Arduino Core), ESP32                                           |&#10;| Frontend   | HTML5, Bootstrap 5, Chart.js (para gráficos de histórico)           |&#10;| Sensores   | DS18B20, DHT-11, UV, Anemômetro                                    |&#10;&#10;## Como Usar&#10;&#10;- Acesse o sistema pelo navegador (endereço do servidor).&#10;- Cadastre-se e aguarde autorização do administrador.&#10;- Após login, acesse o dashboard para visualizar dados em tempo real.&#10;- Exporte dados conforme necessário.&#10;&#10;## Arquitetura de Software&#10;```mermaid&#10;---&#10;config:&#10;  layout: dagre&#10;---&#10;flowchart TD&#10;    E[&quot;**Views.py**&quot;] -- **Show data graphs** --&gt; A[&quot;**Frontend: Dashboard Web**&quot;]&#10;    B[&quot;**API: Django Backend**&quot;] -- **Validating and processing** --&gt; C[&quot;**Models.py**&quot;]&#10;    C -- **Save and recover** --&gt; D[(&quot;**SQLite**&quot;)]&#10;    D -- **Search and show** --&gt; C&#10;    B -- **Send POST** --&gt; E&#10;    F[&quot;**Hardware: ESP32**&quot;] -- **Converted and packed** --&gt; H[&quot;**Json File**&quot;]&#10;    H -- **Send data_sensors** --&gt; B&#10;    G[&quot;**Sensors**&quot;] -- **Analog or digital Sinal** --&gt; F&#10;     E:::Backend&#10;     E:::Backend&#10;     A:::Frontend&#10;     A:::Frontend&#10;     B:::Backend&#10;     B:::Backend&#10;     C:::Backend&#10;     C:::Backend&#10;     D:::Banco&#10;     D:::Banco&#10;     F:::Hardware&#10;     F:::Hardware&#10;     H:::Aqua&#10;     G:::Hardware&#10;    classDef Backend fill:#f9f,stroke:#333,stroke-width:2px&#10;    classDef Frontend fill:#ccf,stroke:#333,stroke-width:2px&#10;    classDef Banco fill:#cff,stroke:#333,stroke-width:2px&#10;    classDef Hardware fill:#FFE0B2, color:#000000&#10;    classDef Aqua stroke-width:1px, stroke-dasharray:none, stroke:#46EDC8, fill:#DEFFF8, color:#378E7A&#10;    style E color:#000000&#10;    style A color:#000000 &#10;    style B color:#000000&#10;    style C color:#000000&#10;    style D color:#000000&#10;    style F color:#000000&#10;    style H color:#000000&#10;    style G stroke:#000000,color:#000000&#10;&#10;```&#10;&#10;## Contribuição&#10;&#10;1. Faça um fork do repositório&#10;2. Crie uma branch (`git checkout -b feature/nova-feature`)&#10;3. Realize os commits das suas alterações&#10;4. Envie um Pull Request&#10;&#10;## Licença&#10;&#10;Este projeto está sob a licença MIT.&#10;&#10;## Contato&#10;- [Luize Baldoni de Oliveira](oliveira.luize@acad.ufsm.br) (Academica de Engenharia de Computação - UFSM, Técnica em Informática para Internet - CTISM/UFSM)&#10;" />
              <option name="updatedContent" value="# EcoView - Sistema de Visualização de Dados em Tempo Real&#10;&#10;![Django](https://img.shields.io/badge/Django-092E20?style=for-the-badge&amp;logo=django&amp;logoColor=white)&#10;![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&amp;logo=python&amp;logoColor=white)&#10;![Bootstrap](https://img.shields.io/badge/Bootstrap-563D7C?style=for-the-badge&amp;logo=bootstrap&amp;logoColor=white)&#10;&#10;Sistema completo para coleta, armazenamento e visualização de dados em tempo real de sistemas desenvolvidos pelo Grupo de Pesquisas em Modelagem HidroAmbiental e Ecotecnologias da UFSM.&#10;&#10;## Sumário&#10;- [Funcionalidades](#funcionalidades)&#10;- [Tecnologias Utilizadas](#️-tecnologias-utilizadas)&#10;- [Como Usar](#como-usar)&#10;- [Arquitetura de Software](#arquitetura-de-software)&#10;- [Contribuição](#contribuição)&#10;- [Licença](#licença)&#10;- [Contato](#contato)&#10;&#10;## Funcionalidades&#10;&#10;- Coleta de dados em tempo real via API REST&#10;- Dashboard interativo com gráficos dinâmicos (Chart.js)&#10;- Gerenciamento de dados com tabelas paginadas e filtros&#10;- Suporte a múltiplos sensores e dispositivos&#10;- Exportação de dados (CSV, JSON, Excel)&#10;- Atualização de firmware OTA (Over the Air)&#10;&#10;## ️ Tecnologias Utilizadas&#10;&#10;| Componente | Tecnologias                                                         |&#10;|------------|---------------------------------------------------------------------|&#10;| Backend    | Python 3.9+, Django 4.2, Django REST Framework, SQLite              |&#10;| Firmware   | C++ (Arduino Core), ESP32                                           |&#10;| Frontend   | HTML5, Bootstrap 5, Chart.js (para gráficos de histórico)           |&#10;| Sensores   | DS18B20, DHT-11, UV, Anemômetro                                    |&#10;&#10;## Como Usar&#10;&#10;- Acesse o sistema pelo navegador (endereço do servidor).&#10;- Cadastre-se e aguarde autorização do administrador.&#10;- Após login, acesse o dashboard para visualizar dados em tempo real.&#10;- Exporte dados conforme necessário.&#10;&#10;## Arquitetura de Software&#10;```mermaid&#10;---&#10;config:&#10;  layout: dagre&#10;---&#10;flowchart TD&#10;    E[&quot;**Views.py**&quot;] -- **Show data graphs** --&gt; A[&quot;**Frontend: Dashboard Web**&quot;]&#10;    B[&quot;**API: Django Backend**&quot;] -- **Validating and processing** --&gt; C[&quot;**Models.py**&quot;]&#10;    C -- **Save and recover** --&gt; D[(&quot;**SQLite**&quot;)]&#10;    D -- **Search and show** --&gt; C&#10;    B -- **Send POST** --&gt; E&#10;    F[&quot;**Hardware: ESP32**&quot;] -- **Converted and packed** --&gt; H[&quot;**Json File**&quot;]&#10;    H -- **Send data_sensors** --&gt; B&#10;    G[&quot;**Sensors**&quot;] -- **Analog or digital Sinal** --&gt; F&#10;     E:::Backend&#10;     E:::Backend&#10;     A:::Frontend&#10;     A:::Frontend&#10;     B:::Backend&#10;     B:::Backend&#10;     C:::Backend&#10;     C:::Backend&#10;     D:::Banco&#10;     D:::Banco&#10;     F:::Hardware&#10;     F:::Hardware&#10;     H:::Aqua&#10;     G:::Hardware&#10;    classDef Backend fill:#f9f,stroke:#333,stroke-width:2px&#10;    classDef Frontend fill:#ccf,stroke:#333,stroke-width:2px&#10;    classDef Banco fill:#cff,stroke:#333,stroke-width:2px&#10;    classDef Hardware fill:#FFE0B2, color:#000000&#10;    classDef Aqua stroke-width:1px, stroke-dasharray:none, stroke:#46EDC8, fill:#DEFFF8, color:#378E7A&#10;    style E color:#000000&#10;    style A color:#000000 &#10;    style B color:#000000&#10;    style C color:#000000&#10;    style D color:#000000&#10;    style F color:#000000&#10;    style H color:#000000&#10;    style G stroke:#000000,color:#000000&#10;&#10;```&#10;&#10;## Contribuição&#10;&#10;1. Faça um fork do repositório&#10;2. Crie uma branch (`git checkout -b feature/nova-feature`)&#10;3. Realize os commits das suas alterações&#10;4. Envie um Pull Request&#10;&#10;## Licença&#10;&#10;Este projeto está sob a licença MIT.&#10;&#10;## Contato&#10;&#10;- **Luize Baldoni de Oliveira**  &#10;  Acadêmica de Engenharia de Computação - UFSM  &#10;  Técnica em Informática para Internet - CTISM/UFSM  &#10;  E-mail: [oliveira.luize@acad.ufsm.br](mailto:oliveira.luize@acad.ufsm.br)&#10;- **Grupo de Pesquisas em Modelagem HidroAmbiental e Ecotecnologias - UFSM**  &#10;  E-mail institucional: grupo.hidroambiental@ufsm.br" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>